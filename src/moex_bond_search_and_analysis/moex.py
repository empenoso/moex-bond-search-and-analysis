import time
import re
from datetime import datetime, timedelta

import pandas as pd
import requests

from moex_bond_search_and_analysis.consts import DATE_FORMAT, MONTH_NAMES_RU_SHORT
from moex_bond_search_and_analysis.logger import Logger
from moex_bond_search_and_analysis.schemas import MonthsOfPayments, SearchByCriteriaConditions, Bond


class MOEX:
    # https://iss.moex.com/iss/engines/stock/markets/bonds/boardgroups/
    BOARD_GROUPS = [58, 193, 105, 77, 207, 167, 245]
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤, –ª–∏–º–∏—Ç –≤ 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    API_DELAY = 1.2

    def __init__(self, log: Logger):
        self.log = log

    def search_bonds(self, conditions: SearchByCriteriaConditions) -> None | list[Bond]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ API –ú–æ—Å–±–∏—Ä–∂–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π, —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ª–æ–≥–∞ –∏ —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞. 
        """
        foo_name = "moex_search_bonds"
        bonds = []
        count = 0
        moex_error_counter = 0

        for t in self.BOARD_GROUPS:
            url = (
                f"https://iss.moex.com/iss/engines/stock/markets/bonds/boardgroups/{t}/securities.json"
                "?iss.dp=comma&iss.meta=off&iss.only=securities,marketdata&"
                "securities.columns=SECID,SECNAME,PREVLEGALCLOSEPRICE&marketdata.columns=SECID,YIELD,DURATION"
            )
            self.log.info(f"üîó {foo_name}. –°—Å—ã–ª–∫–∞ –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π –≥—Ä—É–ø–ø—ã: {url}.") 

            time.sleep(self.API_DELAY)

            try:
                response = requests.get(url)
                response.raise_for_status()
                json_data = response.json()
            except requests.exceptions.RequestException as e:
                moex_error_counter += 1
                self.log.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}") 
                continue

            if not json_data or not json_data.get('marketdata') or not json_data['marketdata'].get('data'):
                self.log.info(
                    f'üìâ {foo_name}. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö c –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {t}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ.'
                ) 
                continue

            bond_list = json_data['securities']['data']
            count = len(bond_list)
            self.log.info(f'üìÉ {foo_name}. –í—Å–µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã {t}: {count} –±—É–º–∞–≥.\n') 

            market_data = json_data['marketdata']['data']
            market_data_dict = {item[0]: item for item in market_data if item}  # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º marketdata –ø–æ SECID

            for i in range(count):
                # –µ—Å–ª–∏ –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏ —Ü–∏–∫–ª –ø—Ä–µ—Ä–≤–∞–ª—Å—è, —Ç–æ–≥–¥–∞ –ø–æ–≤—Ç–æ—Ä
                retry_count = 0  # –°—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                while retry_count < 5:  # –õ–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–æ 5 —Ä–∞–∑
                    try:
                        bond_name = bond_list[i][1].replace('"', '').replace("'", '')
                        secid = bond_list[i][0]
                        bond_price = bond_list[i][2]

                        bond_market_data = market_data_dict.get(secid)
                        if not bond_market_data:
                            self.log.info(
                                f"‚ùå {foo_name} –≤ {datetime.now().strftime('%H:%M:%S')}. "
                                f"–°—Ç—Ä–æ–∫–∞ {i + 1} –∏–∑ {count}: {bond_name} ({secid}): "
                                "–î–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ –¥—é—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
                            ) 
                            break

                        bond_yield = bond_market_data[1]
                        # –∫–æ–ª-–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –º–µ—Å—è—Ü–µ–≤, –¥–µ–ª–∏–º –Ω–∞ 30 –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, –∏–Ω–∞—á–µ 0
                        bond_duration = bond_market_data[2] / 30 if bond_market_data[2] else 0
                        bond_duration = round(bond_duration * 100) / 100

                        self.log.info(
                            f"üîé {foo_name} –≤ {datetime.now().strftime('%H:%M:%S')}. "
                            f"–°—Ç—Ä–æ–∫–∞ {i + 1} –∏–∑ {count}: {bond_name} ({secid}): "
                            f"—Ü–µ–Ω–∞={bond_price}%, –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å={bond_yield}%, –¥—é—Ä–∞—Ü–∏—è={bond_duration} –º–µ—Å."
                        ) 

                        condition = (
                            bond_yield is not None and conditions.yield_more <= bond_yield <= conditions.yield_less and
                            bond_price is not None and conditions.price_more <= bond_price <= conditions.price_less and 
                            conditions.duration_more < bond_duration < conditions.duration_less
                        )
                        if condition:
                            self.log.info(
                                f"‚úÖ {foo_name}.   \\-> –£—Å–ª–æ–≤–∏–µ "
                                f"–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ ({conditions.yield_more} < {bond_yield}% < {conditions.yield_less}), "
                                f"—Ü–µ–Ω—ã ({conditions.price_more} < {bond_price}% < {conditions.price_less}) –∏ "
                                f"–¥—é—Ä–∞—Ü–∏–∏ ({conditions.duration_more} < {bond_duration} –º–µ—Å. < {conditions.duration_less}) "
                                f"–¥–ª—è {bond_name} –ø—Ä–æ—à–ª–æ."
                            )
                            volume_data = self.search_volume(secid, conditions.volume_more)
                            bond_volume = volume_data['value']
                            self.log.info(
                                f"üìä {foo_name}. \\-> "
                                f"–°–æ–≤–æ–∫—É–ø–Ω—ã–π –æ–±—ä–µ–º —Å–¥–µ–ª–æ–∫ –∑–∞ n –¥–Ω–µ–π: {bond_volume}, –∞ "
                                f"—É—Å–ª–æ–≤–∏–µ {conditions.bond_volume_more} —à—Ç."
                            )
                            # lowLiquid: 0 –∏ 1 - –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏.
                            # ‚ùó 0 - —á—Ç–æ–±—ã –æ–±–æ—Ä–æ—Ç –±—ã–ª —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ
                            # ‚ùó 1 - —Ñ–∏–ª—å—Ç—Ä –æ–±–æ—Ä–æ—Ç–∞ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –≤ –≤—ã–±–æ—Ä–∫—É –ø–æ–ø–∞–¥–∞—é—Ç –≤—Å–µ –±—É–º–∞–≥–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                            if volume_data['low_liquid'] == 0 and bond_volume > conditions.bond_volume_more:
                                payments_data = self.search_months_of_payments(secid)
                                is_qualified_investors = self.search_is_qualified_investors(secid)
                                bond_instance = Bond(
                                    name=bond_name,
                                    secid=secid,
                                    is_qualified_investors=is_qualified_investors,
                                    price=bond_price,
                                    volume=bond_volume,
                                    yield_=bond_yield,
                                    duration=bond_duration,
                                    payments_data=payments_data.months_payment_marks,  # XXX: –ø–æ—Ö–æ–∂–µ —Ç—É—Ç –Ω–∞–¥–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å
                                )
                                if conditions.offer_yes_no == "–î–ê" and payments_data.value_rub_null == 0:
                                    bonds.append(bond_instance)
                                    self.log.info(f"üóìÔ∏è {foo_name}. –î–ª—è {bond_name} ({secid}) –≤—Å–µ –¥–∞—Ç—ã –±—É–¥—É—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤—ã–ø–ª–∞—Ç.") 
                                    self.log.info(f'‚≠ê {foo_name}. –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Ññ {len(bonds)}: {bonds[-1]}.') 
                                elif conditions.offer_yes_no == "–ù–ï–¢":
                                    bonds.append(bond_instance)  
                                    self.log.info(f'‚≠ê {foo_name}. –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Ññ {len(bonds)}: {bonds[-1]}.\n') 
                                else:
                                    self.log.info(f"üö´ {foo_name}. –û–±–ª–∏–≥–∞—Ü–∏—è {bond_name} ({secid}) –≤ –≤—ã–±–æ—Ä–∫—É –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –¥–∞—Ç—ã –∫–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã.\n") 
                            else:
                                self.log.info(f"üíß {foo_name}. –û–±–ª–∏–≥–∞—Ü–∏—è {bond_name} ({secid}) –≤ –≤—ã–±–æ—Ä–∫—É –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –∏–∑-–∑–∞ –º–∞–ª—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –º–∞–ª–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π.\n") 
                        else:
                            self.log.info(f'‚è≠Ô∏è {foo_name} –ü—Ä–æ–ø—É—Å–∫ {secid}: –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.\n') 
                        break

                    except requests.exceptions.RequestException as e:
                        retry_count += 1
                        moex_error_counter += 1
                        self.log.info(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {i + 1}: {e}.\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ {retry_count} –∏–∑ 5. –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥.\n")
                        time.sleep(60)
                    except Exception as e:
                        retry_count += 1
                        moex_error_counter += 1
                        self.log.info(f"\nüî• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {i + 1}: {e}.\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ {retry_count} –∏–∑ 5. –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥.\n")
                        time.sleep(60)

        if not bonds:
            self.log.info(f"üì≠ {foo_name}. –í –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç —Å—Ç—Ä–æ–∫.") 
            return None 

        bonds.sort(key=lambda x: x.volume, reverse=True)
        self.log.info(f"üìä {foo_name}. –ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∫–∏: {bonds[0]}, ...") 
        self.log.info(f"üêû {foo_name}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–µ–π: {moex_error_counter}, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.") 
        return bonds

    def search_volume(self, security_id: str, threshold_value: int) -> dict[str, int]:
        """
        –û–±—ä–µ–º —Å–¥–µ–ª–æ–∫ –≤ –∫–∞–∂–¥—ã–π –∏–∑ n –¥–Ω–µ–π –±–æ–ª—å—à–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–º–∞—Ö —Ç–æ—Ä–≥–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –¥–Ω–µ–π.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏, —Å—É–º–º–∞—Ä–Ω–æ–º –æ–±—ä–µ–º–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ª–æ–≥–∞.
        """
        foo_name = "moex_search_volume"
        now = datetime.now()
        date_request_previous = (now - timedelta(days=15)).strftime(DATE_FORMAT)  # —ç—Ç–æ—Ç –¥–µ–Ω—å n –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        board_id = self.board_id(security_id)
        if not board_id:
            self.log.info(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å board_id –¥–ª—è {security_id}. –ü–æ–∏—Å–∫ –æ–±—ä–µ–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω.") 
            return {'low_liquid': 1, 'value': 0}

        url = (
            f"https://iss.moex.com/iss/history/engines/stock/markets/bonds/boards/{board_id}/securities/{security_id}.json?"
            f"iss.meta=off&iss.only=history&history.columns=SECID,TRADEDATE,VOLUME,NUMTRADES&limit=20&from={date_request_previous}"
        )
        # numtrades - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ —Å –±—É–º–∞–≥–æ–π
        # VOLUME - –æ–±–æ—Ä–æ—Ç –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –±—É–º–∞–≥ (–û–±—ä–µ–º —Å–¥–µ–ª–æ–∫, —à—Ç)
        self.log.info(f'üîó {foo_name}. –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—ë–º–∞ —Å–¥–µ–ª–æ–∫ {security_id}: {url}') 
        try:
            time.sleep(self.API_DELAY)

            response = requests.get(url)
            response.raise_for_status()
            json_data = response.json()
            history_data = json_data['history']['data']

            count = len(history_data)
            volume_sum = 0
            low_liquid = 0
            for i in range(count):
                volume = history_data[i][2]
                volume_sum += volume
                if threshold_value > volume:  # –µ—Å–ª–∏ –æ–±–æ—Ä–æ—Ç –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –º–µ–Ω—å—à–µ
                    low_liquid = 1
                    self.log.info(
                        f"üìâ {foo_name}. –ù–∞ {i + 1}-–π –¥–µ–Ω—å ({history_data[i][1]}) –∏–∑ {count} "
                        f"–æ–±–æ—Ä–æ—Ç –ø–æ –±—É–º–∞–≥–µ {security_id} –º–µ–Ω—å—à–µ —á–µ–º {threshold_value}: {volume} —à—Ç."
                    ) 
                if count < 6:  # –µ—Å–ª–∏ –≤—Å–µ–≥–æ –¥–Ω–µ–π –≤ –∞–ø–∏ –Ω–∞ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ –æ—á–µ–Ω—å –º–∞–ª–æ
                    low_liquid = 1
                    self.log.info(
                        f"‚ö†Ô∏è {foo_name}. –í—Å–µ–≥–æ –≤ –ê–ü–ò –ú–æ—Å–±–∏—Ä–∂–∏ –¥–æ—Å—Ç—É–ø–Ω–æ {count} –¥–Ω–µ–π, "
                        f"–∞ –Ω–∞–¥–æ —Ö–æ—Ç—è –±—ã –±–æ–ª—å—à–µ 6 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π —Å {date_request_previous}!"
                    )

            if low_liquid != 1:
                self.log.info(f"üìà {foo_name}. –í–æ –≤—Å–µ—Ö {count} –¥–Ω—è—Ö –æ–±–æ—Ä–æ—Ç –ø–æ –±—É–º–∞–≥–µ {security_id} –±—ã–ª –±–æ–ª—å—à–µ, —á–µ–º {threshold_value} —à—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.")

            self.log.info(f"üìä {foo_name}. –ò—Ç–æ–≥–æ–≤—ã–π –æ–±–æ—Ä–æ—Ç –≤ –±—É–º–∞–≥–∞—Ö (–æ–±—ä–µ–º —Å–¥–µ–ª–æ–∫, —à—Ç) –∑–∞ {count} –¥–Ω–µ–π: {volume_sum} —à—Ç –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º –∏—Ç–æ–≥–æ–º.")
            return {'low_liquid': low_liquid, 'value': volume_sum}

        except requests.exceptions.RequestException as e:
            self.log.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ c {security_id} –≤ {foo_name}: {e}")
            return {'low_liquid': 1, 'value': 0}
        except Exception as e:
            self.log.info(f"üî• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ c {security_id} –≤ {foo_name}: {e}")
            return {'low_liquid': 1, 'value': 0} 

    def board_id(self, security_id: str) -> None | str:
        """
        –£–∑–Ω–∞–µ–º boardid –ª—é–±–æ–π –±—É–º–∞–≥–∏ –ø–æ —Ç–∏–∫–µ—Ä—É.
        –ü–æ–ª—É—á–∞–µ—Ç board_id –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç board_id –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        foo_name = "moex_board_id"
        url = f"https://iss.moex.com/iss/securities/{security_id}.json?iss.meta=off&iss.only=boards&boards.columns=secid,boardid,is_primary"
        try:
            time.sleep(self.API_DELAY)

            response = requests.get(url)
            response.raise_for_status()
            json_data = response.json()

            board_id_data = json_data['boards']['data']
            primary_board = next((board[1] for board in board_id_data if board[2] == 1), None)  # –ù–∞—Ö–æ–¥–∏–º board_id –≥–¥–µ is_primary = 1

            if primary_board:
                return primary_board
            else:
                self.log.info(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω primary board_id –¥–ª—è {security_id}.") 
                return None

        except requests.exceptions.RequestException as e:
            self.log.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ c {security_id} –≤ {foo_name}: {e}")
            return None
        except Exception as e:
            self.log.info(f"üî• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ c {security_id} –≤ {foo_name}: {e}")
            return None

    def search_months_of_payments(self, security_id: str) -> MonthsOfPayments:
        """
        –£–∑–Ω–∞—ë–º –º–µ—Å—è—Ü—ã, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤—ã–ø–ª–∞—Ç—ã.
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—É–ø–æ–Ω–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç–∞—Ö –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Å—è—Ü–∞—Ö –≤—ã–ø–ª–∞—Ç, –Ω–∞–ª–∏—á–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç –∏ months_payment_marks.
        """
        foo_name = "moex_search_months_of_payments"
        url = f"https://iss.moex.com/iss/statistics/engines/stock/markets/bonds/bondization/{security_id}.json?iss.meta=off&iss.only=coupons&start=0&limit=100"
        self.log.info(f'üîó {foo_name}. –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—è—Ü–µ–≤ –≤—ã–ø–ª–∞—Ç –¥–ª—è {security_id}: {url}.') 
        try:
            time.sleep(self.API_DELAY)

            response = requests.get(url)
            response.raise_for_status()
            json_data = response.json()

            coupon_data = json_data['coupons']['data']

            coupon_dates = []
            value_rub_null = 0
            for i in range(len(coupon_data)):
                coupondate = coupon_data[i][3]  # –¥–∞—Ç—ã –∫—É–ø–æ–Ω–∞
                value_rub = coupon_data[i][9]  # —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã –∫—É–ø–æ–Ω–∞
                in_future = datetime.strptime(coupondate, DATE_FORMAT) > datetime.now()
                if in_future:
                    coupon_dates.append(int(coupondate.split("-")[1]))  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞
                    if value_rub is None:
                        value_rub_null += 1

            if value_rub_null > 0:
                self.log.info(f"‚ö†Ô∏è {foo_name}. –î–ª—è {security_id} –µ—Å—Ç—å {value_rub_null} –¥–∞—Ç(—ã) –±—É–¥—É—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤—ã–ø–ª–∞—Ç.") 

            unique_dates = sorted(list(set(coupon_dates)))  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            self.log.info(f"üóìÔ∏è {foo_name}. –ö—É–ø–æ–Ω—ã –¥–ª—è {security_id} –≤—ã–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –≤ {unique_dates} –º–µ—Å—è—Ü—ã.") 

            months_payment_marks = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–º–µ—Ç–æ–∫ –º–µ—Å—è—Ü–µ–≤
            for month_num in range(1, 13):
                months_payment_marks[MONTH_NAMES_RU_SHORT[month_num-1]] = "‚úÖ" if month_num in unique_dates else ""  # –û—Ç–º–µ—á–∞–µ–º –º–µ—Å—è—Ü—ã —Å –≤—ã–ø–ª–∞—Ç–∞–º–∏

            return MonthsOfPayments(value_rub_null=value_rub_null, months_payment_marks=months_payment_marks)

        except requests.exceptions.RequestException as e:
            self.log.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ c {security_id} –≤ {foo_name}: {e}")
            return  MonthsOfPayments(value_rub_null=0, months_payment_marks={})
        except Exception as e:
            self.log.info(f"üî• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ c {security_id} –≤ {foo_name}: {e}")
            return  MonthsOfPayments(value_rub_null=0, months_payment_marks={})

    def search_is_qualified_investors(self, security_id: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–æ –±—É–º–∞–≥–∞ –¥–ª—è –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∏–ª–∏ –Ω–µ—Ç.
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±–ª–∏–≥–∞—Ü–∏–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.
        """
        foo_name = "moex_search_is_qualified_investors"
        url = f"https://iss.moex.com/iss/securities/{security_id}.json?iss.meta=off&iss.only=description&description.columns=name,title,value"
        self.log.info(f'üîó {foo_name}. –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ {security_id}: {url}') 
        try:

            time.sleep(self.API_DELAY)

            response = requests.get(url)
            response.raise_for_status()
            json_data = response.json()
            description_data = json_data['description']['data']

            is_qualified_investors_data = next((item for item in description_data if item[0] == 'ISQUALIFIEDINVESTORS'), None)
            qual_investor_group_data = next((item for item in description_data if item[0] == 'QUALINVESTORGROUP'), None)

            is_qualified_investors = int(is_qualified_investors_data[2]) if is_qualified_investors_data and is_qualified_investors_data[2] else 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            qual_investor_group = qual_investor_group_data[2] if qual_investor_group_data and qual_investor_group_data[2] else "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"  # –¢–µ–∫—Å—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω

            if is_qualified_investors == 0:
                self.log.info(f"üë§ {foo_name}. –î–ª—è {security_id} –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ù–ï –Ω—É–∂–Ω–∞.") 
                return '–Ω–µ—Ç'
            else:
                self.log.info(f"üë®‚Äçüíº {foo_name}. {security_id} —ç—Ç–æ –±—É–º–∞–≥–∞ –¥–ª—è –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \"{qual_investor_group}\"") 
                return '–¥–∞'

        except requests.exceptions.RequestException as e:
            self.log.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ c {security_id} –≤ {foo_name}: {e}") 
            return '–æ—à–∏–±–∫–∞'  # Return some error indicator
        except Exception as e:
            self.log.info(f"üî• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ c {security_id} –≤ {foo_name}: {e}") 
            return '–æ—à–∏–±–∫–∞'  # Return some error indicator

    def process_bonds(self, bonds: list[tuple[str | float | datetime | None, ...]]) -> list[list[str]]:
        cash_flow = []
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –æ–±–ª–∏–≥–∞—Ü–∏—é
        for ID, number in bonds:
            self.log.info("")
            self.log.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {ID}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {number} —à—Ç.")
            url = f"https://iss.moex.com/iss/statistics/engines/stock/markets/bonds/bondization/{ID}.json?iss.meta=off"
            self.log.info(f"–ó–∞–ø—Ä–æ—Å –∫ {url}")
            
            response = requests.get(url)
            json_data = response.json()
            
            assert isinstance(number, (float, int))
            coupons = json_data.get("coupons", {})
            amortizations = json_data.get("amortizations", {})
            cash_flow.extend(self.process_coupons(coupons.get("data", []), coupons.get("columns", []), number))
            cash_flow.extend(self.process_payment(amortizations.get("data", []), amortizations.get("columns", []), number))

        return cash_flow

    def process_coupons(self, coupons: list[tuple[str | int | float, ...]], columns: list[str], number: float | int) -> list[list[str]]:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É–ø–æ–Ω–æ–≤
        cash_flow = []

        isin_idx = columns.index("isin")
        name_idx = columns.index("name")
        coupondate_idx = columns.index("coupondate")
        value_rub_idx = columns.index("value_rub")

        for coupon in coupons:
            name = str(coupon[name_idx]).replace('"', '').replace("'", '').replace("\\", '')
            isin = coupon[isin_idx]
            coupon_date = coupon[coupondate_idx]

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç datetime
            coupon_datetime = datetime.strptime(str(coupon_date), "%Y-%m-%d")

            if coupon_datetime > datetime.now():
                value_rub = float(coupon[value_rub_idx] or 0) * number
                flow = [f"{name} (–∫—É–ø–æ–Ω üè∑Ô∏è)", isin, coupon_datetime, value_rub]
                cash_flow.append(flow)
                self.log.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫—É–ø–æ–Ω: {flow}")

        return cash_flow

    def process_payment(self, amortizations: list[tuple[str | int | float, ...]], columns: list[str], number: float | int) -> list[list[str]]:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–ª–∞—Ç –Ω–æ–º–∏–Ω–∞–ª–∞
        cash_flow = []

        isin_idx = columns.index("isin")
        name_idx = columns.index("name")
        amortdate_idx = columns.index("amortdate")
        value_rub_idx = columns.index("value_rub")

        for amort in amortizations:
            name = str(amort[name_idx]).replace('"', '').replace("'", '').replace("\\", '')
            isin = amort[isin_idx]
            amort_date = amort[amortdate_idx]

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç datetime
            amort_datetime = datetime.strptime(str(amort_date), "%Y-%m-%d")

            if amort_datetime > datetime.now():
                value_rub = float(amort[value_rub_idx] or 0) * number
                flow = [f"{name} (–Ω–æ–º–∏–Ω–∞–ª üíØ)", isin, amort_datetime, value_rub]
                cash_flow.append(flow)
                self.log.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ –Ω–æ–º–∏–Ω–∞–ª–∞: {flow}")

        return cash_flow

    def fetch_company_names(self, df: pd.DataFrame) -> list[str]:
        """üîÑ –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π –ø–æ —Ç–∏–∫–µ—Ä–∞–º –æ–±–ª–∏–≥–∞—Ü–∏–π."""
        company_names = []
        delay_between_calls = 0.5  # —Å–µ–∫—É–Ω–¥—ã
        for ticker in df.iloc[:, 0]:
            url = f"https://iss.moex.com/iss/securities.json?q={ticker}&iss.meta=off"
            self.log.info(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ä: {ticker}")

            try:
                response = requests.get(url)
                response.raise_for_status()
                data = response.json()

                if not data["securities"]["data"]:
                    self.log.info(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {ticker}")
                    continue

                emitent_title = data["securities"]["data"][0][8]
                match = re.search(r'"([^"]+)"', emitent_title)
                company_name = match.group(1) if match else emitent_title

                company_names.append(company_name)
                self.log.info(f"‚úÖ {emitent_title} ‚Üí {company_name}")
            
            except (requests.RequestException, IndexError, KeyError) as e:
                self.log.info(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {ticker}: {e}")

            time.sleep(delay_between_calls)

        # üîÑ –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
        company_names = list(dict.fromkeys(company_names))
        return company_names