from datetime import datetime
import os
import sys
import time
from typing import Callable

import humanize

from moex_bond_search_and_analysis.consts import DATETIME_FORMAT


def setup_encoding() -> None:
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if os.name == "nt":
        sys.stdout.reconfigure(encoding="utf-8")


def measure_method_duration(foo: Callable) -> Callable:
    def wrapper(self, *args, **kwargs):
        start_time = int(time.monotonic())
        self.log.info(
            f"üöÄ –§—É–Ω–∫—Ü–∏—è {foo.__name__} –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—É –≤ {datetime.now().strftime(DATETIME_FORMAT)}."
        )
        result = foo(self, *args, **kwargs)
        duration = humanize.precisedelta(
            int(time.monotonic()) - start_time, minimum_unit="seconds", format="%0.0f"
        )
        self.log.info(
            f"‚úÖ –§—É–Ω–∫—Ü–∏—è {foo.__name__} –∑–∞–∫–æ–Ω—á–∏–ª–∞ —Ä–∞–±–æ—Ç—É –≤ {datetime.now().strftime(DATETIME_FORMAT)}."
        )
        self.log.info(f"‚è≥ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {foo.__name__}: {duration}.")
        return result

    return wrapper


def create_news_folder() -> str:
    """üìÇ –°–æ–∑–¥–∞—ë—Ç –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π."""
    current_date = datetime.now().strftime("%Y-%m-%d")
    folder_path = f"news_{current_date}"
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    return folder_path
