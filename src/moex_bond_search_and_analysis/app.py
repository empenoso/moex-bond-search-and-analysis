from datetime import datetime
from typing import Any

import emoji
import pandas as pd
import time

from moex_bond_search_and_analysis.moex import MOEX
from moex_bond_search_and_analysis.news import google_search, write_to_file
from moex_bond_search_and_analysis.plugins.excel import ExcelSource
from moex_bond_search_and_analysis.logger import like_print_log
from moex_bond_search_and_analysis.schemas import SearchByCriteriaConditions
from moex_bond_search_and_analysis.utils import create_news_folder, measure_method_duration


class App:
    def __init__(self) -> None:
        self.log = like_print_log
        self.moex = MOEX(log=self.log)
    
    @measure_method_duration
    def search_by_criteria(self):
        search_conditions = SearchByCriteriaConditions()
        moex_search_bonds_result = self.moex.search_bonds(conditions=search_conditions)
        if moex_search_bonds_result:
            output_source = ExcelSource(filename=f"bond_search_{datetime.now().strftime('%Y-%m-%d')}.xlsx")
            output_source.write_search_by_criteria(moex_search_bonds_result, search_conditions, self.moex.log)
            self.log.info(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Excel —Ñ–∞–π–ª: {output_source.filename}")
    
    @measure_method_duration
    def search_coupons(self):
        bounds_source = ExcelSource(filename="bonds.xlsx")
        bond_sheets = bounds_source.load_bonds()
        data_iterator = bond_sheets.data.iter_rows(min_row=2, max_row=bond_sheets.data.max_row, values_only=True)
        bonds = [row for row in data_iterator if row[0] and row[1]]
        self.log.info(f"–°—á–∏—Ç–∞–Ω–æ {len(bonds)} –æ–±–ª–∏–≥–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        cash_flow = self.moex.process_bonds(bonds=bonds)
        bounds_source.write_bonds(sheets=bond_sheets, cache_flow=cash_flow, log=self.log)

    @measure_method_duration
    def search_news(self):
        delay_between_calls = 3  # —Å–µ–∫—É–Ω–¥—ã
        self.log.info("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel...")
        df = pd.read_excel("bonds.xlsx", sheet_name="–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        self.log.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        company_names = self.moex.fetch_company_names(df)
        news_folder_path = create_news_folder()
        for company in company_names:
            news = google_search(company, self.log)
            write_to_file(news_folder_path, company, news)
            self.log.info(emoji.emojize(f"‚úçÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news)} –¥–ª—è {company}"))
            time.sleep(delay_between_calls)

        self.log.info("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    @measure_method_duration
    def calc_purchase_volume(self, available_money: int = 700_000):
        self.log.info(f"üíµ –î–æ—Å—Ç—É–ø–Ω–∞—è —Å—É–º–º–∞: {available_money} —Ä—É–±.")
        results = self._calculate_bonds_distribution(available_money)
        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
        if results:
            total_spent = sum(r['money_spent'] for r in results)
            self.log.info("\nüìä –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
            self.log.info(f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:.2f} —Ä—É–±.")
            self.log.info(f"–û—Å—Ç–∞—Ç–æ–∫: {(available_money - total_spent):.2f} —Ä—É–±.")


    def _calculate_bonds_distribution(self, available_money: int) -> list[dict[str, Any]]:
        """
        # –†–∞—Å—á–µ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É –æ–±–ª–∏–≥–∞—Ü–∏—è–º–∏
        """
        self.log.info("üìä –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞ Excel...")
        df = pd.read_excel('bonds.xlsx', sheet_name='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', usecols='A')
        bonds_list = df.iloc[:, 0].tolist()
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –æ–±–ª–∏–≥–∞—Ü–∏—è—Ö
        valid_bonds = []
        for bond in bonds_list:
            self.log.info(f"\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–ª–∏–≥–∞—Ü–∏–∏ {bond}...")
            price, nkd, date = self.moex.get_bond_price(bond)
            
            if price is not None and nkd is not None:
                valid_bonds.append({
                    'bond': bond,
                    'price': price,
                    'nkd': nkd,
                    'total_cost': price + nkd,
                    'price_date': date
                })
        
        if not valid_bonds:
            self.log.info("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
            return []
        
        # –†–∞—Å—á–µ—Ç —Ä–∞–≤–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥
        num_bonds = len(valid_bonds)
        money_per_bond = available_money / num_bonds
        self.log.info(f"\nüí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {available_money} —Ä—É–±. –º–µ–∂–¥—É {num_bonds} –æ–±–ª–∏–≥–∞—Ü–∏—è–º–∏")
        self.log.info(f"üíµ –°—É–º–º–∞ –Ω–∞ –∫–∞–∂–¥—É—é –æ–±–ª–∏–≥–∞—Ü–∏—é: {money_per_bond:.2f} —Ä—É–±.")
        
        # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏
        results = []
        for bond_info in valid_bonds:
            num_bonds = int(money_per_bond // bond_info['total_cost'])
            actual_money = num_bonds * bond_info['total_cost']
            
            results.append({
                'bond': bond_info['bond'],
                'quantity': num_bonds,
                'price': bond_info['price'],
                'nkd': bond_info['nkd'],
                'total_cost': bond_info['total_cost'],
                'money_spent': actual_money,
                'price_date': bond_info['price_date']
            })
            
            self.log.info(f"\nüìà –û–±–ª–∏–≥–∞—Ü–∏—è {bond_info['bond']}:")
            self.log.info(f"   –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: {bond_info['price_date']}")
            self.log.info(f"   –¶–µ–Ω–∞: {bond_info['price']:.2f} —Ä—É–±.")
            self.log.info(f"   –ù–ö–î: {bond_info['nkd']:.2f} —Ä—É–±.")
            self.log.info(f"   –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏: {bond_info['total_cost']:.2f} —Ä—É–±.")
            self.log.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ –ø–æ–∫—É–ø–∫–µ: {num_bonds} —à—Ç.")
            self.log.info(f"   –°—É–º–º–∞ –∫ —Ä–∞—Å—Ö–æ–¥—É: {actual_money:.2f} —Ä—É–±.")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ DataFrame –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_df = pd.DataFrame({
            '–ö–æ–¥ —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏': [r['bond'] for r in results],
            '–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞': [r['price_date'] for r in results],
            '–¶–µ–Ω–∞, —Ä—É–±.': [r['price'] for r in results],
            '–ù–ö–î, —Ä—É–±.': [r['nkd'] for r in results],
            '–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏, —Ä—É–±.': [r['total_cost'] for r in results],
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ –ø–æ–∫—É–ø–∫–µ, —à—Ç.': [r['quantity'] for r in results],
            '–°—É–º–º–∞ –∫ —Ä–∞—Å—Ö–æ–¥—É, —Ä—É–±.': [r['money_spent'] for r in results]
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        self.log.info("\nüìù –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel...")
        results_df.to_excel('bonds_calculation purchase volume.xlsx', 
                        sheet_name='–†–∞—Å—á–µ—Ç', 
                        index=False)
        self.log.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª 'bonds_calculation purchase volume.xlsx'")
        
        return results