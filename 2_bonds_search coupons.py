# üí∞ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ–Ω–µ–∂–Ω–æ–º –ø–æ—Ç–æ–∫–µ –æ–±–ª–∏–≥–∞—Ü–∏–π üí∞
#
# –≠—Ç–æ—Ç Python —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫—É–ø–æ–Ω–∞—Ö –∏ –≤—ã–ø–ª–∞—Ç–∞—Ö –Ω–æ–º–∏–Ω–∞–ª–∞
# —á–µ—Ä–µ–∑ API –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π –∏–∑ Excel-—Ñ–∞–π–ª–∞ bonds.xlsx –∏ 
# –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —ç—Ç–æ—Ç –∂–µ —Ñ–∞–π–ª.
#
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º: pip install requests openpyxl
#
# –ê–≤—Ç–æ—Ä: –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω https://shardin.name/
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 29.01.2025
# –í–µ—Ä—Å–∏—è: 1.1
#
# –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å: https://github.com/empenoso/moex-bond-search-and-analysis
# 

import dataclasses
import logging
import os
import sys
from datetime import datetime

import requests
import openpyxl
from openpyxl.worksheet.worksheet import Worksheet
from openpyxl.workbook import Workbook

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
if os.name == "nt":
    sys.stdout.reconfigure(encoding="utf-8")

log = logging.getLogger(__name__)
empty_log = logging.getLogger("empty")

def setup_logging():
    log.setLevel(logging.INFO)
    empty_log.setLevel(logging.INFO)

    handler = logging.StreamHandler(sys.stdout)
    empty_handler = logging.StreamHandler(sys.stdout)

    formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
    empty_formater = logging.Formatter("")

    handler.setFormatter(formatter)
    empty_handler.setFormatter(empty_formater)

    log.addHandler(handler)
    empty_log.addHandler(empty_handler)

@dataclasses.dataclass
class ExcelSheets:
    file_path: str
    workbook: Workbook
    data: Worksheet
    result: Worksheet


def main():
    setup_logging()
    excel_sheets = load_excel_file()
    excel_sheets = clean_excel_sheets_result(excel_sheets=excel_sheets)
    bonds = read_bonds(excel_sheets=excel_sheets)
    log.info(f"–°—á–∏—Ç–∞–Ω–æ {len(bonds)} –æ–±–ª–∏–≥–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    cash_flow = process_bonds(bonds=bonds)
    write_data_to_excel(excel_sheets=excel_sheets, cache_flow=cash_flow)


def load_excel_file(file_path: str = "bonds.txt") -> ExcelSheets:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel-—Ñ–∞–π–ª
    file_path = "bonds.xlsx"
    wb = openpyxl.load_workbook(file_path)
    return ExcelSheets(file_path=file_path, workbook=wb, data=wb["–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"], result=wb["–î–µ–Ω.–ø–æ—Ç–æ–∫"])


def clean_excel_sheets_result(excel_sheets: ExcelSheets):
    # –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    column_names = ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", "–î–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã", "–î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫, ‚ÇΩ (–∫—É–ø–æ–Ω | –≤—ã–ø–ª–∞—Ç–∞ –Ω–æ–º–∏–Ω–∞–ª–∞)"]
    excel_sheets.result.delete_rows(1, excel_sheets.result.max_row)
    excel_sheets.result.append(column_names)
    return excel_sheets


def read_bonds(excel_sheets: ExcelSheets) -> list[tuple[str | float | datetime | None, ...]]:
    # –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
    def is_not_empty_data(row) -> bool:
        return row[0] and row[1]
    
    data_iterator = excel_sheets.data.iter_rows(min_row=2, max_row=excel_sheets.data.max_row, values_only=True)
    return [row for row in data_iterator if is_not_empty_data(row)]


def process_bonds(bonds: list[tuple[str | float | datetime | None, ...]]) -> list[list[str]]:
    cash_flow = []
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –æ–±–ª–∏–≥–∞—Ü–∏—é
    for ID, number in bonds:
        empty_log.info("")
        log.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {ID}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {number} —à—Ç.")
        url = f"https://iss.moex.com/iss/statistics/engines/stock/markets/bonds/bondization/{ID}.json?iss.meta=off"
        log.info(f"–ó–∞–ø—Ä–æ—Å –∫ {url}")
        
        response = requests.get(url)
        json_data = response.json()
        
        assert isinstance(number, (float, int))
        cash_flow.extend(process_payment(json_data.get("amortizations", {}).get("data", []), number))
        coupons = json_data.get("coupons", {})
        cash_flow.extend(process_coupons(coupons.get("data", []), coupons.get("columns", []), number))

    return cash_flow


def process_coupons(coupons: list[tuple[str | int | float, ...]], columns: list[str], number: float | int) -> list[list[str]]:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É–ø–æ–Ω–æ–≤
    cash_flow = []

    isin_idx = columns.index("isin")
    name_idx = columns.index("name")
    coupondate_idx = columns.index("coupondate")
    value_rub_idx = columns.index("value_rub")

    for coupon in coupons:
        name = str(coupon[name_idx]).replace('"', '').replace("'", '').replace("\\", '')
        isin = coupon[isin_idx]
        coupon_date = coupon[coupondate_idx]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç datetime
        coupon_datetime = datetime.strptime(str(coupon_date), "%Y-%m-%d")

        if coupon_datetime > datetime.now():
            value_rub = float(coupon[value_rub_idx] or 0) * number
            flow = [f"{name} (–∫—É–ø–æ–Ω üè∑Ô∏è)", isin, coupon_datetime, value_rub]
            cash_flow.append(flow)
            log.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫—É–ø–æ–Ω: {flow}")

    return cash_flow


def process_payment(amortizations: list[tuple[str | int | float, ...]], number: float | int) -> list[list[str]]:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–ª–∞—Ç –Ω–æ–º–∏–Ω–∞–ª–∞
    cash_flow = []
    for amort in amortizations:
        name = str(amort[1]).replace('"', '').replace("'", '').replace("\\", '')
        isin = amort[0]
        amort_date = amort[3]

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç datetime
        amort_datetime = datetime.strptime(str(amort_date), "%Y-%m-%d")

        if amort_datetime > datetime.now():
            value_rub = float(amort[9] or 0) * number
            flow = [f"{name} (–Ω–æ–º–∏–Ω–∞–ª üíØ)", isin, amort_datetime, value_rub]
            cash_flow.append(flow)
            log.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ –Ω–æ–º–∏–Ω–∞–ª–∞: {flow}")

    return cash_flow


def write_data_to_excel(excel_sheets: ExcelSheets, cache_flow: list[list[str]]):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel
    for row in cache_flow:
        excel_sheets.result.append(row)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —è—á–µ–µ–∫
    for cell in excel_sheets.result["C"][1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        cell.number_format = "DD.MM.YYYY"

    for cell in excel_sheets.result["D"][1:]:
        cell.number_format = '# ##0,00 ‚ÇΩ'

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    update_message = f"–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã {datetime.now().strftime('%d.%m.%Y –≤ %H:%M:%S')}"
    excel_sheets.result.append(["", update_message])
    log.info(update_message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ
    excel_sheets.workbook.save(excel_sheets.file_path)
    log.info(f"–§–∞–π–ª {excel_sheets.file_path} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    log.info("–ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω https://shardin.name/\n")


if __name__ == "__main__":
    main()
    # –í –∫–æ–Ω—Ü–µ —Å–∫—Ä–∏–ø—Ç–∞
    input("–ù–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
