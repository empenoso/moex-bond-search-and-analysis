# üí∞ –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø–æ–∫—É–ø–∫–∏ –æ–±–ª–∏–≥–∞—Ü–∏–π üí∞
#
# –≠—Ç–æ—Ç Python —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∏–≥–∞—Ü–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏,
# –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å—É–º–º–µ –¥–µ–Ω–µ–≥. –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –ù–ö–î —á–µ—Ä–µ–∑ API –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏
# –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π –∏–∑ Excel-—Ñ–∞–π–ª–∞ bonds.xlsx –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
# –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª 'bonds_calculation purchase volume.xlsx'.
#
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
# - –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ Excel-—Ñ–∞–π–ª–∞
# - –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∏ –ù–ö–î —á–µ—Ä–µ–∑ API –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏
# - –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–µ–∫—É—â–∏—Ö –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
# - –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å—É–º–º—ã –º–µ–∂–¥—É –≤—Å–µ–º–∏ –æ–±–ª–∏–≥–∞—Ü–∏—è–º–∏
# - –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
# - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –Ω–æ–≤—ã–π Excel-—Ñ–∞–π–ª —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
#
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º: pip install pandas requests openpyxl
#
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ bonds.xlsx:
# - –õ–∏—Å—Ç "–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
# - –ö–æ–ª–æ–Ω–∫–∞ A: –ö–æ–¥—ã –æ–±–ª–∏–≥–∞—Ü–∏–π —Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏
#
# –ê–≤—Ç–æ—Ä: –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω https://shardin.name/
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 16.02.2025
# –í–µ—Ä—Å–∏—è: 1.0
#
# –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å: https://github.com/empenoso/moex-bond-search-and-analysis
#

import pandas as pd
import requests
import json
from datetime import datetime, timedelta

def get_bond_price(security_code):
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –æ–±–ª–∏–≥–∞—Ü–∏–∏ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫—É–ø–æ–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    # –° –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    current_date = datetime.now()
    
    for attempt in range(10):
        try_date = current_date - timedelta(days=attempt)
        date_str = try_date.strftime('%Y-%m-%d')
        
        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date_str}")
        
        price_url = f"https://iss.moex.com/iss/history/engines/stock/markets/bonds/boards/TQCB/securities/{security_code}.json?iss.meta=off&iss.json=extended&callback=JSON_CALLBACK&lang=ru&from={date_str}"
        response = requests.get(price_url)
        data = json.loads(response.text.replace('JSON_CALLBACK(', '').rstrip(')'))
        
        if data[1]['history']:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞ {date_str}")
            close_price = data[1]['history'][0]['CLOSE']
            face_value = data[1]['history'][0]['FACEVALUE']
            current_price = close_price * face_value / 100
            
            nkd_url = f"https://iss.moex.com/iss/engines/stock/markets/bonds/boards/TQCB/securities/{security_code}.json?iss.meta=off&iss.only=securities&lang=ru"
            response = requests.get(nkd_url)
            data = json.loads(response.text)
            accrued_interest = data['securities']['data'][0][7]
            
            return current_price, accrued_interest, date_str
    
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {security_code} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π")
    return None, None, None

def calculate_bonds_distribution(available_money):
    """
    # –†–∞—Å—á–µ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É –æ–±–ª–∏–≥–∞—Ü–∏—è–º–∏
    """
    print("üìä –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞ Excel...")
    df = pd.read_excel('bonds.xlsx', sheet_name='–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', usecols='A')
    bonds_list = df.iloc[:, 0].tolist()
    
    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –æ–±–ª–∏–≥–∞—Ü–∏—è—Ö
    valid_bonds = []
    for bond in bonds_list:
        print(f"\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–ª–∏–≥–∞—Ü–∏–∏ {bond}...")
        price, nkd, date = get_bond_price(bond)
        
        if price is not None:
            valid_bonds.append({
                'bond': bond,
                'price': price,
                'nkd': nkd,
                'total_cost': price + nkd,
                'price_date': date
            })
    
    if not valid_bonds:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
        return []
    
    # –†–∞—Å—á–µ—Ç —Ä–∞–≤–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥
    num_bonds = len(valid_bonds)
    money_per_bond = available_money / num_bonds
    print(f"\nüí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {available_money} —Ä—É–±. –º–µ–∂–¥—É {num_bonds} –æ–±–ª–∏–≥–∞—Ü–∏—è–º–∏")
    print(f"üíµ –°—É–º–º–∞ –Ω–∞ –∫–∞–∂–¥—É—é –æ–±–ª–∏–≥–∞—Ü–∏—é: {money_per_bond:.2f} —Ä—É–±.")
    
    # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏
    results = []
    for bond_info in valid_bonds:
        num_bonds = int(money_per_bond // bond_info['total_cost'])
        actual_money = num_bonds * bond_info['total_cost']
        
        results.append({
            'bond': bond_info['bond'],
            'quantity': num_bonds,
            'price': bond_info['price'],
            'nkd': bond_info['nkd'],
            'total_cost': bond_info['total_cost'],
            'money_spent': actual_money,
            'price_date': bond_info['price_date']
        })
        
        print(f"\nüìà –û–±–ª–∏–≥–∞—Ü–∏—è {bond_info['bond']}:")
        print(f"   –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: {bond_info['price_date']}")
        print(f"   –¶–µ–Ω–∞: {bond_info['price']:.2f} —Ä—É–±.")
        print(f"   –ù–ö–î: {bond_info['nkd']:.2f} —Ä—É–±.")
        print(f"   –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏: {bond_info['total_cost']:.2f} —Ä—É–±.")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ –ø–æ–∫—É–ø–∫–µ: {num_bonds} —à—Ç.")
        print(f"   –°—É–º–º–∞ –∫ —Ä–∞—Å—Ö–æ–¥—É: {actual_money:.2f} —Ä—É–±.")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ DataFrame –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_df = pd.DataFrame({
        '–ö–æ–¥ —Ü–µ–Ω–Ω–æ–π –±—É–º–∞–≥–∏': [r['bond'] for r in results],
        '–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞': [r['price_date'] for r in results],
        '–¶–µ–Ω–∞, —Ä—É–±.': [r['price'] for r in results],
        '–ù–ö–î, —Ä—É–±.': [r['nkd'] for r in results],
        '–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –æ–±–ª–∏–≥–∞—Ü–∏–∏, —Ä—É–±.': [r['total_cost'] for r in results],
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ –ø–æ–∫—É–ø–∫–µ, —à—Ç.': [r['quantity'] for r in results],
        '–°—É–º–º–∞ –∫ —Ä–∞—Å—Ö–æ–¥—É, —Ä—É–±.': [r['money_spent'] for r in results]
    })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    print("\nüìù –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel...")
    results_df.to_excel('bonds_calculation purchase volume.xlsx', 
                       sheet_name='–†–∞—Å—á–µ—Ç', 
                       index=False)
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª 'bonds_calculation purchase volume.xlsx'")
    
    return results

if __name__ == "__main__":
    available_money = 700000  # –î–æ—Å—Ç—É–ø–Ω–∞—è —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
    print(f"üíµ –î–æ—Å—Ç—É–ø–Ω–∞—è —Å—É–º–º–∞: {available_money} —Ä—É–±.")
    results = calculate_bonds_distribution(available_money)
    
    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    if results:
        total_spent = sum(r['money_spent'] for r in results)
        print(f"\nüìä –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
        print(f"–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:.2f} —Ä—É–±.")
        print(f"–û—Å—Ç–∞—Ç–æ–∫: {(available_money - total_spent):.2f} —Ä—É–±.")
    
    print("\n–ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω https://shardin.name/\n")

    # –í –∫–æ–Ω—Ü–µ —Å–∫—Ä–∏–ø—Ç–∞
    input("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...")